@model CobotWebApp.Models.View.IotViewModel.MoveLControlCommandRequestViewModel;

<div class="container py-3">
    <partial name="_HeaderPartial" />
    <main>
        @await Html.PartialAsync("_BreadCrumbPartial", Model.BreadCrumbPartialViewModelList)
        <div class="container">
            <div class="h2 pb-3">Move L Control Command Request</div>
            <form casp-controller="Iot" asp-action="MoveLControlCommandResponse" method="post">
                <div class="row g-3 pb-3">
                    <div class="col-sm-6">
                        <label asp-for="Acceleration" class="form-label">Acceleration</label>
                        <input asp-for="Acceleration" class="form-control" value="0.5">
                    </div>
                    <div class="col-sm-6">
                        <label asp-for="Velocity" class="form-label">Velocity</label>
                        <input asp-for="Velocity" class="form-control" value="0.5">
                    </div>
                    <div class="col-sm-6">
                        <label asp-for="BlendRadius" class="form-label">BlendRadius</label>
                        <input asp-for="BlendRadius" class="form-control" value="0">
                    </div>
      
                    <div class="col-sm-6">
                        <label asp-for="TimeS" class="form-label">Time S</label>
                        <input asp-for="TimeS" class="form-control" value="0">
                    </div>
                    <div class="col-sm-12">
                        <div class="input-group">
                            <span class="input-group-text">Tcp Position Model Array</span>
                            <textarea class="form-control" asp-for="TcpPositionModelArray"></textarea>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <span class="w-100 btn btn-secondary btn-lg" data-bs-toggle="modal" data-bs-target="#tcpPositionModal">Add Tcp Position Model</span>
                    </div>
                    <div class="col-sm-6">
                        <button class="w-100 btn btn-danger btn-lg" type="submit">Execute</button>
                    </div>
                    <div class="col-sm-12">
                        <a class="w-100 btn btn-lg btn-primary" asp-controller="Iot" asp-action="Dashboard">Back</a>
                    </div>
                 </div>
            </form>
        </div>
    </main>
</div>
<div class="modal fade" id="tcpPositionModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="tcpPositionalModelForm">
                <div class="modal-header">
                    <h1 class="modal-title fs-5">Tcp Position Model</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="xInput" class="col-form-label">X</label>
                        <input type="text" id="xInput" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label for="yInput" class="col-form-label">Y</label>
                        <input type="text" id="yInput" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label for="zInput" class="col-form-label">Z</label>
                        <input type="text" id="zInput" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label for="rxInput" class="col-form-label">Rx</label>
                        <input type="text" id="rxInput" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label for="ryInput" class="col-form-label">Ry</label>
                        <input type="text" id="ryInput" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label for="rzInput" class="col-form-label">Rz</label>
                        <input type="text" id="rzInput" class="form-control">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Append Tcp Position Model</button>
                </div>
            </form>
        </div>
    </div>
</div>
@section CSS{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        .bi {
            vertical-align: -.125em;
            fill: currentColor;
        }

        .icon-link > .bi {
            width: .75em;
            height: .75em;
        }
    </style>
    <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
        <symbol id="aperture" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="10" />
            <path d="M14.31 8l5.74 9.94M9.69 8h11.48M7.38 12l5.74-9.94M9.69 16L3.95 6.06M14.31 16H2.83m13.79-4l-5.74 9.94" />
        </symbol>
        <symbol id="cart" viewBox="0 0 16 16">
            <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .49.598l-1 5a.5.5 0 0 1-.465.401l-9.397.472L4.415 11H13a.5.5 0 0 1 0 1H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM3.102 4l.84 4.479 9.144-.459L13.89 4H3.102zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
        </symbol>
        <symbol id="chevron-right" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
        </symbol>
        <symbol id="house-door-fill" viewBox="0 0 16 16">
            <path d="M6.5 14.5v-3.505c0-.245.25-.495.5-.495h2c.25 0 .5.25.5.5v3.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5z" />
        </symbol>
    </svg>
}
@section Scripts{
    <script type="text/javascript">
        document.getElementById("tcpPositionalModelForm").addEventListener("submit", function (event) {
            event.preventDefault();
            const tcpPositionModelArrayTextArea = document.getElementById("TcpPositionModelArray");
            const xInput = document.getElementById("xInput");
            const yInput = document.getElementById("yInput");
            const zInput = document.getElementById("zInput");
            const rxInput = document.getElementById("rxInput");
            const ryInput = document.getElementById("ryInput");
            const rzInput = document.getElementById("rzInput");

            var tcpPositionModelArrayValue = tcpPositionModelArrayTextArea.value;
            var xValue = parseFloat(xInput.value);
            var yValue = parseFloat(yInput.value);
            var zValue = parseFloat(zInput.value);
            var rxValue = parseFloat(rxInput.value);
            var ryValue = parseFloat(ryInput.value);
            var rzValue = parseFloat(rzInput.value);

            if (isNaN(xValue)) {
                xValue = 0.0;
            }
            if (isNaN(yValue)) {
                yValue = 0.0;
            }
            if (isNaN(zValue)) {
                zValue = 0.0;
            }
            if (isNaN(rxValue)) {
                rxValue = 0.0;
            }
            if (isNaN(ryValue)) {
                ryValue = 0.0;
            }
            if (isNaN(rzValue)) {
                rzValue = 0.0;
            }

            if (tcpPositionModelArrayValue.trim() === '') {
                let tcpPositionModelArray = [];
                const tcpPositionModelObject = {
                    tcpPositionModel: {
                        x: xValue,
                        y: yValue,
                        z: zValue,
                        rx: rxValue,
                        ry: ryValue,
                        rz: rzValue
                    }
                };
                tcpPositionModelArray.push(tcpPositionModelObject);
                tcpPositionModelArrayTextArea.value = JSON.stringify(tcpPositionModelArray, null, 2);
            }
            else {
                let tcpPositionModelArray = JSON.parse(tcpPositionModelArrayValue);
                const tcpPositionModelObject = {
                    tcpPositionModel: {
                        x: xValue,
                        y: yValue,
                        z: zValue,
                        rx: rxValue,
                        ry: ryValue,
                        rz: rzValue
                    }
                };
                tcpPositionModelArray.push(tcpPositionModelObject);
                tcpPositionModelArrayTextArea.value = JSON.stringify(tcpPositionModelArray, null, 2);
            }
        });
    </script>
}